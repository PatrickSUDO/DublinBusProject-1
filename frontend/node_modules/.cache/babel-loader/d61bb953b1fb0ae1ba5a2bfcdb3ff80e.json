{"ast":null,"code":"var _jsxFileName = \"/Users/pie_trick/Desktop/Semester3/Dublin-Bus-Time/frontend/src/App.js\";\nimport React, { useState } from 'react';\nimport { Key } from './key'; // 引入 API key\n\nimport GoogleMapReact from 'google-map-react'; // Default Dublin center\n// 53.347816\n// -6.259317\n\nconst MyPositionMarker = ({\n  text\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 40\n  }\n}, text); // const Marker = ({ icon, text }) => (\n//   <div>\n//     <img style={{ height: '30px', width: '30px' }} src={icon} />\n//     <div>{text}</div>\n//   </div>\n// )\n// Map\n\n\nconst SimpleMap = props => {\n  //Default position\n  const [myPosition, setMyPosition] = useState({\n    lat: 53.347816,\n    lng: -6.259317\n  });\n  const [mapApiLoaded, setMapApiLoaded] = useState(false);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapApi, setMapApi] = useState(null); // const [places, setPlaces] = useState([])\n\n  const apiHasLoaded = (map, maps) => {\n    setMapInstance(map);\n    setMapApi(maps);\n    setMapApiLoaded(true);\n  };\n\n  const handleCenterChange = ({\n    bound,\n    zoom,\n    center\n  }) => {\n    if (mapApiLoaded) {\n      setMyPosition({\n        // center.lat()  center.lng() catch the center in the screen\n        lat: mapInstance.center.lat(),\n        lng: mapInstance.center.lng()\n      });\n    }\n  }; // Find bus stop\n  // const findBusStopLocation = () => {\n  //   if(mapApiLoaded) {\n  //     const service = new mapApi.places.PlacesService(mapInstance)\n  //     const request = {\n  //       location: myPosition,\n  //       radius: 1000,\n  //       type: ['cafe']\n  //     };\n  //     service.nearbySearch(request, (results, status) => {\n  //       if(status === mapApi.places.PlacesServiceStatus.OK) {\n  //         setPlaces(results)\n  //       }\n  //     })\n  //   }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: Key,\n      libraries: ['places'] // Our api\n\n    },\n    onChange: handleCenterChange,\n    defaultCenter: props.center,\n    defaultZoom: props.zoom,\n    yesIWantToUseGoogleMapApiInternals: true //map: map itself, maps: google map object \n    ,\n    onGoogleApiLoaded: ({\n      map,\n      maps\n    }) => apiHasLoaded(map, maps),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyPositionMarker, {\n    lat: myPosition.lat,\n    lng: myPosition.lng,\n    text: \"My Position\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })));\n}; // Set defaultProps\n\n\nSimpleMap.defaultProps = {\n  center: {\n    lat: 53.348358,\n    lng: -6.260327\n  },\n  zoom: 17\n}; // App\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SimpleMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pie_trick/Desktop/Semester3/Dublin-Bus-Time/frontend/src/App.js"],"names":["React","useState","Key","GoogleMapReact","MyPositionMarker","text","SimpleMap","props","myPosition","setMyPosition","lat","lng","mapApiLoaded","setMapApiLoaded","mapInstance","setMapInstance","mapApi","setMapApi","apiHasLoaded","map","maps","handleCenterChange","bound","zoom","center","height","width","key","libraries","defaultProps","App"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Key } from './key' // 引入 API key\nimport GoogleMapReact from 'google-map-react';\n// Default Dublin center\n// 53.347816\n// -6.259317\nconst MyPositionMarker = ({ text }) => <div>{text}</div>;\n\n// const Marker = ({ icon, text }) => (\n//   <div>\n//     <img style={{ height: '30px', width: '30px' }} src={icon} />\n//     <div>{text}</div>\n//   </div>\n// )\n\n// Map\nconst SimpleMap = (props) => {\n  //Default position\n  const [myPosition, setMyPosition] = useState({\n    lat: 53.347816,\n    lng: -6.259317\n  })\n\n  const [mapApiLoaded, setMapApiLoaded] = useState(false)\n  const [mapInstance, setMapInstance] = useState(null)\n  const [mapApi, setMapApi] = useState(null)\n  // const [places, setPlaces] = useState([])\n\n  const apiHasLoaded = (map, maps) => {\n    setMapInstance(map)\n    setMapApi(maps)\n    setMapApiLoaded(true)\n  };\n\n  const handleCenterChange = ({bound, zoom, center}) => {\n    if(mapApiLoaded) {\n      setMyPosition({\n        // center.lat()  center.lng() catch the center in the screen\n        lat: mapInstance.center.lat(),\n        lng: mapInstance.center.lng()\n      })\n    }\n  }\n  // Find bus stop\n  // const findBusStopLocation = () => {\n  //   if(mapApiLoaded) {\n  //     const service = new mapApi.places.PlacesService(mapInstance)\n\n  //     const request = {\n  //       location: myPosition,\n  //       radius: 1000,\n  //       type: ['cafe']\n  //     };\n\n  //     service.nearbySearch(request, (results, status) => {\n  //       if(status === mapApi.places.PlacesServiceStatus.OK) {\n  //         setPlaces(results)\n  //       }\n  //     })\n  //   }\n  // }\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      {/* <input type=\"button\" value=\"show bus stop\" onClick={findBusStopLocation} /> */}\n      <GoogleMapReact\n        bootstrapURLKeys={{\n          key: Key,\n          libraries:['places'] // Our api\n        }}\n        onChange={handleCenterChange}\n        defaultCenter={props.center}\n        defaultZoom={props.zoom}\n        yesIWantToUseGoogleMapApiInternals\n        //map: map itself, maps: google map object \n        onGoogleApiLoaded={({ map, maps }) => apiHasLoaded(map, maps)}\n      >\n        <MyPositionMarker\n          lat={myPosition.lat}\n          lng={myPosition.lng}\n          text=\"My Position\"\n        />\n        {/* {places.map(item=>(\n          <Marker\n            icon={item.icon}\n            key={item.id}\n            lat={item.geometry.location.lat()}\n            lng={item.geometry.location.lng()}\n            text={item.name}\n            placeId={item.place_id}\n          />\n        ))} */}\n      </GoogleMapReact>\n    </div>\n  );\n}\n\n// Set defaultProps\nSimpleMap.defaultProps = {\n  center: {\n    lat: 53.348358, \n    lng: -6.260327\n  },\n  zoom: 17\n};\n\n\n// App\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleMap />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}