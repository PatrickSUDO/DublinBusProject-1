{"ast":null,"code":"var _jsxFileName = \"/Users/pie_trick/Desktop/Semester3/Dublin-Bus-Time/frontend/src/App.js\";\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport { Key } from './key'; // 引入 API key\n\nimport GoogleMapReact from 'google-map-react'; // Default Dublin center\n// 53.347816\n// -6.259317\n\nconst MyPositionMarker = ({\n  text\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 40\n  }\n}, text);\n\nconst Marker = ({\n  icon,\n  text\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  style: {\n    height: '30px',\n    width: '30px'\n  },\n  src: icon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, text)); // Map\n\n\nconst SimpleMap = props => {\n  const [myPosition, setMyPosition] = useState({\n    lat: 53.347816,\n    lng: -6.259317\n  }); // Default state\n\n  let inputRef = useRef(null);\n  const [searchType, setSearchType] = useState(['bus_station']);\n  const [mapApiLoaded, setMapApiLoaded] = useState(false);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapApi, setMapApi] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const [mapType, setMapType] = useState('roadmap'); //Autocomplete\n\n  const showInputValue = () => console.log();\n\n  const apiHasLoaded = (map, maps) => {\n    setMapInstance(map);\n    setMapApi(maps);\n    setMapApiLoaded(true);\n  }; // Find bus stop\n\n\n  const findLocation = () => {\n    if (mapApiLoaded) {\n      const service = new mapApi.places.PlacesService(mapInstance);\n      const request = {\n        location: myPosition,\n        radius: 1000,\n        type: searchType\n      };\n      service.nearbySearch(request, (results, status) => {\n        if (status === mapApi.places.PlacesServiceStatus.OK) {\n          setPlaces(results);\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    findLocation();\n  }, [searchType, myPosition, mapApiLoaded]);\n\n  const handleCenterChange = ({\n    bound,\n    zoom,\n    center\n  }) => {\n    if (mapApiLoaded) {\n      setMyPosition({\n        // center.lat()  center.lng() catch the center in the screen\n        lat: mapInstance.center.lat(),\n        lng: mapInstance.center.lng()\n      });\n    }\n  };\n\n  const SearchType = ({\n    text,\n    type\n  }) => {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: text,\n      name: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const handleSearchType = e => {\n    setSearchType(e.target.name);\n  }; // Change map type\n\n\n  const handleMapTypeId = e => {\n    setMapType(e.target.name);\n  };\n\n  const handleAutocomplete = () => {\n    if (mapApiLoaded) {\n      const service = new mapApi.places.AutocompleteService();\n      const request = {\n        input: 'Dundrum'\n      };\n      service.getPlacePredictions(request, results => {\n        console.log(results);\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef,\n    type: \"text\",\n    onChange: showInputValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"autocomplete\",\n    onClick: handleAutocomplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleSearchType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SearchType, {\n    text: \"bus stop\",\n    type: \"bus_station\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SearchType, {\n    text: \"somewhere fun\",\n    type: \"tourist_attraction\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"satellite\",\n    onClick: handleMapTypeId,\n    name: \"hybrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"road\",\n    onClick: handleMapTypeId,\n    name: \"roadmap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: Key,\n      libraries: ['places'] // Our api\n\n    } //Fix the react google map bug\n    ,\n    distanceToMouse: () => {},\n    options: {\n      mapTypeId: mapType\n    },\n    onChange: handleCenterChange,\n    defaultCenter: props.center,\n    defaultZoom: props.zoom,\n    yesIWantToUseGoogleMapApiInternals: true //map: map itself, maps: google map object \n    ,\n    onGoogleApiLoaded: ({\n      map,\n      maps\n    }) => apiHasLoaded(map, maps),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyPositionMarker, {\n    lat: myPosition.lat,\n    lng: myPosition.lng,\n    text: \"My Position\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), places.map(item => /*#__PURE__*/React.createElement(Marker, {\n    icon: item.icon,\n    key: item.id,\n    lat: item.geometry.location.lat(),\n    lng: item.geometry.location.lng(),\n    text: item.name,\n    placeId: item.place_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }))));\n}; // Set defaultProps\n\n\nSimpleMap.defaultProps = {\n  center: {\n    lat: 53.348358,\n    lng: -6.260327\n  },\n  zoom: 17\n}; // App\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SimpleMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pie_trick/Desktop/Semester3/Dublin-Bus-Time/frontend/src/App.js"],"names":["React","Component","useState","useEffect","useRef","Key","GoogleMapReact","MyPositionMarker","text","Marker","icon","height","width","SimpleMap","props","myPosition","setMyPosition","lat","lng","inputRef","searchType","setSearchType","mapApiLoaded","setMapApiLoaded","mapInstance","setMapInstance","mapApi","setMapApi","places","setPlaces","mapType","setMapType","showInputValue","console","log","apiHasLoaded","map","maps","findLocation","service","PlacesService","request","location","radius","type","nearbySearch","results","status","PlacesServiceStatus","OK","handleCenterChange","bound","zoom","center","SearchType","handleSearchType","e","target","name","handleMapTypeId","handleAutocomplete","AutocompleteService","input","getPlacePredictions","key","libraries","mapTypeId","item","id","geometry","place_id","defaultProps","App"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect, useRef } from 'react';\nimport { Key } from './key' // 引入 API key\nimport GoogleMapReact from 'google-map-react';\n// Default Dublin center\n// 53.347816\n// -6.259317\nconst MyPositionMarker = ({ text }) => <div>{text}</div>;\n\nconst Marker = ({ icon, text }) => (\n  <div>\n    <img style={{ height: '30px', width: '30px' }} src={icon} />\n    <div>{text}</div>\n  </div>\n)\n\n\n// Map\nconst SimpleMap = (props) => {\n  const [myPosition, setMyPosition] = useState({\n    lat: 53.347816,\n    lng: -6.259317\n  })\n\n  // Default state\n  let inputRef = useRef(null);\n  const [searchType, setSearchType] = useState(['bus_station'])\n  const [mapApiLoaded, setMapApiLoaded] = useState(false)\n  const [mapInstance, setMapInstance] = useState(null)\n  const [mapApi, setMapApi] = useState(null)\n  const [places, setPlaces] = useState([])\n  const [mapType, setMapType] = useState('roadmap')\n\n  //Autocomplete\n  const showInputValue = () => console.log()\n\n  const apiHasLoaded = (map, maps) => {\n    setMapInstance(map)\n    setMapApi(maps)\n    setMapApiLoaded(true)\n  };\n\n  // Find bus stop\n  const findLocation = () => {\n    if(mapApiLoaded) {\n      const service = new mapApi.places.PlacesService(mapInstance)\n\n      const request = {\n        location: myPosition,\n        radius: 1000,\n        type: searchType\n      };\n\n      service.nearbySearch(request, (results, status) => {\n        if(status === mapApi.places.PlacesServiceStatus.OK) {\n          setPlaces(results)\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    findLocation()\n  }, [searchType, myPosition, mapApiLoaded])\n\n  const handleCenterChange = ({bound, zoom, center}) => {\n    if(mapApiLoaded) {\n      setMyPosition({\n        // center.lat()  center.lng() catch the center in the screen\n        lat: mapInstance.center.lat(),\n        lng: mapInstance.center.lng()\n      })\n    }\n  }\n\n  const SearchType = ({ text, type }) => {\n    return <input type=\"button\" value={text} name={type} />\n  }\n\n  const handleSearchType = e => {\n    setSearchType(e.target.name)\n  }\n  \n  // Change map type\n  const handleMapTypeId = e => {\n    setMapType(e.target.name)\n  }\n\n  const handleAutocomplete = ()  =>{\n    if (mapApiLoaded) {\n      const service = new mapApi.places.AutocompleteService()\n      const request ={\n        input: 'Dundrum'\n      }\n\n      service.getPlacePredictions(request, results => {\n        console.log(results)\n      });\n\n    }\n  }\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n    <input ref={inputRef} type=\"text\" onChange={showInputValue} />\n    <input type=\"button\" value=\"autocomplete\" onClick={handleAutocomplete} /> \n      <div onClick={handleSearchType}>\n        <SearchType text=\"bus stop\" type=\"bus_station\" />\n        <SearchType text=\"somewhere fun\" type=\"tourist_attraction\" />\n      </div>\n      <input type=\"button\" value=\"satellite\" onClick={ handleMapTypeId } name=\"hybrid\" />\n      <input type=\"button\" value=\"road\" onClick={ handleMapTypeId } name=\"roadmap\" />\n      <GoogleMapReact\n        bootstrapURLKeys={{\n          key: Key,\n          libraries:['places'] // Our api\n        }}\n      \n        //Fix the react google map bug\n        distanceToMouse={()=>{}}\n\n        options={{ mapTypeId: mapType }}\n        onChange={handleCenterChange}\n        defaultCenter={props.center}\n        defaultZoom={props.zoom}\n        yesIWantToUseGoogleMapApiInternals\n        //map: map itself, maps: google map object \n        onGoogleApiLoaded={({ map, maps }) => apiHasLoaded(map, maps)}\n      >\n        <MyPositionMarker\n          lat={myPosition.lat}\n          lng={myPosition.lng}\n          text=\"My Position\"\n        />\n        {places.map(item=>(\n          <Marker\n            icon={item.icon}\n            key={item.id}\n            lat={item.geometry.location.lat()}\n            lng={item.geometry.location.lng()}\n            text={item.name}\n            placeId={item.place_id}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n}\n\n// Set defaultProps\nSimpleMap.defaultProps = {\n  center: {\n    lat: 53.348358, \n    lng: -6.260327\n  },\n  zoom: 17\n};\n\n\n// App\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleMap />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}