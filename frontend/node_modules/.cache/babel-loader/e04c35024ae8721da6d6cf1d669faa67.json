{"ast":null,"code":"var _jsxFileName = \"/Users/pie_trick/Desktop/Semester3/Dublin-Bus-Time/frontend/src/App.js\";\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport { debounce } from 'lodash'; //Autocomplete time delay setting\n\nimport { Key } from './key'; // API key\n\nimport GoogleMapReact from 'google-map-react'; // Default Dublin center\n\nlet cityCenter = {\n  lat: 53.347816,\n  lng: -6.259317\n};\n\nconst MyPositionMarker = ({\n  text\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 40\n  }\n}, text);\n\nconst Marker = ({\n  icon,\n  text\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"img\", {\n  style: {\n    height: '30px',\n    width: '30px'\n  },\n  alt: \"icon\",\n  src: icon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }\n}, text)); // Map\n\n\nconst SimpleMap = props => {\n  const [myPosition, setMyPosition] = useState({\n    lat: cityCenter.lat,\n    lng: cityCenter.lng\n  }); // Default state\n\n  let inputRef = useRef(null);\n  const [mapApiLoaded, setMapApiLoaded] = useState(false);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapApi, setMapApi] = useState(null);\n\n  const apiHasLoaded = (map, maps) => {\n    setMapInstance(map);\n    setMapApi(maps);\n    setMapApiLoaded(true);\n  };\n\n  const [searchType, setSearchType] = useState(['bus_station']);\n\n  const SearchType = ({\n    text,\n    type\n  }) => {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: text,\n      name: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    });\n  }; // Find bus stop\n\n\n  const [places, setPlaces] = useState([]);\n\n  const findLocation = () => {\n    if (mapApiLoaded) {\n      const service = new mapApi.places.PlacesService(mapInstance);\n      const request = {\n        location: myPosition,\n        radius: 1000,\n        type: searchType\n      };\n      service.nearbySearch(request, (results, status) => {\n        if (status === mapApi.places.PlacesServiceStatus.OK) {\n          setPlaces(results);\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    findLocation();\n  }, [searchType, myPosition, mapApiLoaded]);\n\n  const handleCenterChange = ({\n    bound,\n    zoom,\n    center\n  }) => {\n    if (mapApiLoaded) {\n      setMyPosition({\n        // center.lat()  center.lng() catch the center in the screen\n        lat: mapInstance.center.lat(),\n        lng: mapInstance.center.lng()\n      });\n    }\n  };\n\n  const [inputTextFrom, setInputTextFrom] = useState('');\n  const [inputTextTo, setInputTextTo] = useState('');\n\n  const handleInputFrom = () => {\n    setInputTextFrom(inputRefFrom.current.value);\n  };\n\n  const handleInputTo = () => {\n    setInputTextTo(inputRefTo.current.value);\n  };\n\n  const handleSearchType = e => {\n    setSearchType(e.target.name);\n  }; // Change map type\n\n\n  const [mapType, setMapType] = useState('roadmap');\n\n  const handleMapTypeId = e => {\n    setMapType(e.target.name);\n  };\n\n  const [autocompleteResults, setAutocompleteResults] = useState([]);\n\n  const handleAutocomplete = () => {\n    if (mapApiLoaded) {\n      const serviceFrom = new mapApi.places.AutocompleteService();\n      const serviceTo = new mapApi.places.AutocompleteService();\n      const request = {\n        input: inputText\n      };\n      serviceFrom.getPlacePredictions(request, (results, status) => {\n        if (status === mapApi.places.PlacesServiceStatus.OK) {\n          setAutocompleteResults(results);\n        }\n      });\n      serviceTo.getPlacePredictions(request, (results, status) => {\n        if (status === mapApi.places.PlacesServiceStatus.OK) {\n          setAutocompleteResults(results);\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    handleAutocomplete();\n  }, [inputText]);\n  const [currentCenter, setCurrentCenter] = useState({\n    lat: cityCenter.lat,\n    lng: cityCenter.lng\n  });\n\n  const handleClickToChangeMyPosition = e => {\n    const placeId = e.target.getAttribute('dataid');\n    const service = new mapApi.places.PlacesService(mapInstance);\n    const request = {\n      placeId: placeId,\n      fields: ['geometry']\n    };\n    service.getDetails(request, (result, status) => {\n      if (status === mapApi.places.PlacesServiceStatus.OK) {\n        const newPosition = {\n          lat: result.geometry.location.lat(),\n          lng: result.geometry.location.lng()\n        };\n        setCurrentCenter(newPosition); // change view\n\n        setMyPosition(newPosition); // change MyPosition\n\n        setAutocompleteResults([]); // Empty search list\n\n        inputRefFrom.current.value = ''; // Empty <input>\n\n        inputRefTo.current.value = '';\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, \"From: \", /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRefFrom,\n    type: \"text\",\n    onChange: debounce(handleInputFrom, 500),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }), \"To: \", /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRefTo,\n    type: \"text\",\n    onChange: debounce(handleInputTo, 500),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleClickToChangeMyPosition,\n    class: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, autocompleteResults && (inputTextFrom || inputTextTo) && autocompleteResults.map(item => /*#__PURE__*/React.createElement(\"div\", {\n    key: item.id,\n    dataid: item.place_id,\n    id: \"search-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, item.description)))), /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleSearchType,\n    class: \"search-place\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SearchType, {\n    text: \"Bus Stop\",\n    type: \"bus_station\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SearchType, {\n    text: \"Tourist Spot\",\n    type: \"tourist_attraction\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"map-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Satellite\",\n    onClick: handleMapTypeId,\n    name: \"hybrid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: \"Road\",\n    onClick: handleMapTypeId,\n    name: \"roadmap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: Key,\n      libraries: ['places'] // Our api\n\n    } //hacky way to fix bug\n    ,\n    distanceToMouse: () => {},\n    center: currentCenter,\n    options: {\n      mapTypeId: mapType\n    },\n    onChange: handleCenterChange,\n    defaultCenter: props.center,\n    defaultZoom: props.zoom,\n    yesIWantToUseGoogleMapApiInternals: true //map: map itself, maps: google map object \n    ,\n    onGoogleApiLoaded: ({\n      map,\n      maps\n    }) => apiHasLoaded(map, maps),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MyPositionMarker, {\n    lat: myPosition.lat,\n    lng: myPosition.lng,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }), places.map(item => /*#__PURE__*/React.createElement(Marker, {\n    icon: item.icon,\n    key: item.id,\n    lat: item.geometry.location.lat(),\n    lng: item.geometry.location.lng(),\n    text: item.name,\n    placeId: item.place_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }))));\n}; // Set defaultProps\n\n\nSimpleMap.defaultProps = {\n  center: {\n    lat: cityCenter.lat,\n    lng: cityCenter.lng\n  },\n  zoom: 17\n}; // App\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SimpleMap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/pie_trick/Desktop/Semester3/Dublin-Bus-Time/frontend/src/App.js"],"names":["React","Component","useState","useEffect","useRef","debounce","Key","GoogleMapReact","cityCenter","lat","lng","MyPositionMarker","text","Marker","icon","height","width","SimpleMap","props","myPosition","setMyPosition","inputRef","mapApiLoaded","setMapApiLoaded","mapInstance","setMapInstance","mapApi","setMapApi","apiHasLoaded","map","maps","searchType","setSearchType","SearchType","type","places","setPlaces","findLocation","service","PlacesService","request","location","radius","nearbySearch","results","status","PlacesServiceStatus","OK","handleCenterChange","bound","zoom","center","inputTextFrom","setInputTextFrom","inputTextTo","setInputTextTo","handleInputFrom","inputRefFrom","current","value","handleInputTo","inputRefTo","handleSearchType","e","target","name","mapType","setMapType","handleMapTypeId","autocompleteResults","setAutocompleteResults","handleAutocomplete","serviceFrom","AutocompleteService","serviceTo","input","inputText","getPlacePredictions","currentCenter","setCurrentCenter","handleClickToChangeMyPosition","placeId","getAttribute","fields","getDetails","result","newPosition","geometry","item","id","place_id","description","key","libraries","mapTypeId","defaultProps","App"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect, useRef } from 'react';\nimport { debounce } from 'lodash' //Autocomplete time delay setting\nimport { Key } from './key' // API key\nimport GoogleMapReact from 'google-map-react';\n\n// Default Dublin center\nlet cityCenter = {\n    lat: 53.347816,\n    lng: -6.259317\n};\n\n\nconst MyPositionMarker = ({ text }) => <div>{text}</div>;\n\nconst Marker = ({ icon, text }) => (\n  <div>\n    <img style={{ height: '30px', width: '30px' }} alt=\"icon\" src={icon} />\n    <div>{text}</div>\n  </div>\n)\n\n\n// Map\nconst SimpleMap = (props) => {\n  const [myPosition, setMyPosition] = useState({\n    lat: cityCenter.lat,\n    lng: cityCenter.lng\n  })\n\n  // Default state\n  let inputRef = useRef(null);\n  \n  const [mapApiLoaded, setMapApiLoaded] = useState(false)\n  const [mapInstance, setMapInstance] = useState(null)\n  const [mapApi, setMapApi] = useState(null)\n  \n  const apiHasLoaded = (map, maps) => {\n    setMapInstance(map)\n    setMapApi(maps)\n    setMapApiLoaded(true)\n  };\n\n  const [searchType, setSearchType] = useState(['bus_station'])\n\n  const SearchType = ({ text, type }) => {\n    return <input type=\"button\" value={text} name={type} />\n  }\n  \n  // Find bus stop\n  const [places, setPlaces] = useState([])\n\n  const findLocation = () => {\n    if(mapApiLoaded) {\n      const service = new mapApi.places.PlacesService(mapInstance)\n\n      const request = {\n        location: myPosition,\n        radius: 1000,\n        type: searchType\n      };\n\n      service.nearbySearch(request, (results, status) => {\n        if(status === mapApi.places.PlacesServiceStatus.OK) {\n          setPlaces(results)\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    findLocation()\n  }, [searchType, myPosition, mapApiLoaded])\n\n  const handleCenterChange = ({bound, zoom, center}) => {\n    if(mapApiLoaded) {\n      setMyPosition({\n        // center.lat()  center.lng() catch the center in the screen\n        lat: mapInstance.center.lat(),\n        lng: mapInstance.center.lng()\n      })\n    }\n  }\n\n  const [inputTextFrom, setInputTextFrom] = useState('')\n  const [inputTextTo, setInputTextTo] = useState('')\n\n  const handleInputFrom = () =>{\n    setInputTextFrom(inputRefFrom.current.value)\n  }\n\n  const handleInputTo = () =>{\n    setInputTextTo(inputRefTo.current.value)\n  }\n\n  const handleSearchType = e => {\n    setSearchType(e.target.name)\n  }\n  \n  // Change map type\n  const [mapType, setMapType] = useState('roadmap')\n\n  const handleMapTypeId = e => {\n    setMapType(e.target.name)\n  }\n\n  const [autocompleteResults, setAutocompleteResults] = useState([])\n  \n  const handleAutocomplete = () =>{\n    if (mapApiLoaded) {\n      const serviceFrom = new mapApi.places.AutocompleteService()\n      const serviceTo = new mapApi.places.AutocompleteService()\n      const request ={\n        input: inputText\n      }\n\n      serviceFrom.getPlacePredictions(request, (results, status, ) => {\n        if(status === mapApi.places.PlacesServiceStatus.OK){\n          setAutocompleteResults(results)\n        }\n      });\n\n      serviceTo.getPlacePredictions(request, (results, status, ) => {\n        if(status === mapApi.places.PlacesServiceStatus.OK){\n          setAutocompleteResults(results)\n        }\n      });\n\n    }\n  }\n  useEffect(()=>{\n    handleAutocomplete()\n  }, [inputText])\n\n  const [currentCenter, setCurrentCenter] = useState({\n    lat: cityCenter.lat,\n    lng: cityCenter.lng\n  })\n\n  const handleClickToChangeMyPosition = e => {\n    const placeId = e.target.getAttribute('dataid')\n    const service = new mapApi.places.PlacesService(mapInstance)\n    const request = {\n      placeId: placeId,\n      fields: [\n        'geometry'\n      ]\n    }\n    service.getDetails(request, (result, status)=>{\n      if( status === mapApi.places.PlacesServiceStatus.OK) {\n        const newPosition = {\n          lat: result.geometry.location.lat(),\n          lng: result.geometry.location.lng()\n        }\n        setCurrentCenter(newPosition) // change view\n        setMyPosition(newPosition) // change MyPosition\n        setAutocompleteResults([]) // Empty search list\n        inputRefFrom.current.value = '' // Empty <input>\n        inputRefTo.current.value = ''\n      }\n    })\n  }\n\n  return (\n      <div style={{ height: '100vh', width: '100%' }}>\n      <div>\n        <div >\n        From: <input ref={inputRefFrom} type=\"text\" onChange={ debounce(handleInputFrom, 500) } />\n        To: <input ref={inputRefTo} type=\"text\" onChange={ debounce(handleInputTo, 500) } />\n        </div>\n        <div onClick={handleClickToChangeMyPosition} class=\"search\"> \n          {(autocompleteResults && (inputTextFrom || inputTextTo)) &&\n          autocompleteResults.map(item=>(\n            <div key={item.id} dataid={item.place_id} id=\"search-list\">\n              {item.description}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <div onClick={handleSearchType} class=\"search-place\">\n        <SearchType text=\"Bus Stop\" type=\"bus_station\" />\n        <SearchType text=\"Tourist Spot\" type=\"tourist_attraction\" />\n      </div>\n      <div class=\"map-type\">\n        <input type=\"button\" value=\"Satellite\" onClick={ handleMapTypeId } name=\"hybrid\" />\n        <input type=\"button\" value=\"Road\" onClick={ handleMapTypeId } name=\"roadmap\" />\n      </div>\n      <GoogleMapReact\n        bootstrapURLKeys={{\n          key: Key,\n          libraries:['places'] // Our api\n        }}\n        //hacky way to fix bug\n        distanceToMouse={()=>{}}\n\n        center={currentCenter}\n        options={{ mapTypeId: mapType }}\n        onChange={handleCenterChange}\n        defaultCenter={props.center}\n        defaultZoom={props.zoom}\n        yesIWantToUseGoogleMapApiInternals\n        //map: map itself, maps: google map object \n        onGoogleApiLoaded={({ map, maps }) => apiHasLoaded(map, maps)}\n        \n      >\n        <MyPositionMarker\n          lat={myPosition.lat}\n          lng={myPosition.lng}\n        />\n        {places.map(item=>(\n          <Marker\n            icon={item.icon}\n            key={item.id}\n            lat={item.geometry.location.lat()}\n            lng={item.geometry.location.lng()}\n            text={item.name}\n            placeId={item.place_id}\n          />\n        ))}\n      </GoogleMapReact>\n    </div>\n  );\n}\n\n// Set defaultProps\nSimpleMap.defaultProps = {\n  center: {\n    lat: cityCenter.lat,\n    lng: cityCenter.lng\n  },\n  zoom: 17\n};\n\n\n// App\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SimpleMap />\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}